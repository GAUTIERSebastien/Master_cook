public>home.html


<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="./masterchef.svg" type="image/x-icon">
    <!-- Style -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="./css/style.css">

    <title>Master COOK</title>
</head>

<body>
    <h1 id="title">MASTER<img src="./masterchef.svg" width="40px" alt="">COOK</h1>

    <div id="showElement">
    </div>

    <script src="./js/fetchAllRecipes.js" type="module"></script>
    <script src="./js/update.js" type="module"></script>
</body>

</html>


data>db.json

{
    "allRecipes": [
        {
            "name": "french",
            "recipes": [
                {
                    "id": 100,
                    "title": "creme anglaise",
                    "ingredients": [
                        {
                            "name": "lait",
                            "quantity": 1,
                            "unit": "UNIT_LITER"
                        },
                        {
                            "name": "sucre",
                            "quantity": 250,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "jaune d'oeuf",
                            "quantity": 8,
                            "unit": "UNIT_OBJECT"
                        },
                        {
                            "name": "gousse vanille",
                            "quantity": 1,
                            "unit": "UNIT_POD"
                        }
                    ]
                },
                {
                    "id": 101,
                    "title": "creme patisiere",
                    "ingredients": [
                        {
                            "name": "lait",
                            "quantity": 1,
                            "unit": "UNIT_LITER"
                        },
                        {
                            "name": "sucre",
                            "quantity": 250,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "farine",
                            "quantity": 125,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "jaune d'oeuf",
                            "quantity": 8,
                            "unit": "UNIT_OBJECT"
                        },
                        {
                            "name": "gousse vanille",
                            "quantity": 1,
                            "unit": "UNIT_POD"
                        }
                    ]
                },
                {
                    "id": 103,
                    "title": "riz au lait",
                    "ingredients": [
                        {
                            "name": "lait",
                            "quantity": 1,
                            "unit": "UNIT_LITER"
                        },
                        {
                            "name": "sucre",
                            "quantity": 400,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "riz",
                            "quantity": 200,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "gousse vanille",
                            "quantity": 1,
                            "unit": "UNIT_POD"
                        }
                    ]
                },
                {
                    "id": 104,
                    "title": "creme brullé",
                    "ingredients": [
                        {
                            "name": "lait",
                            "quantity": 1,
                            "unit": "UNIT_LITER"
                        },
                        {
                            "name": "sucre",
                            "quantity": 100,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "jaune d'oeuf",
                            "quantity": 10,
                            "unit": "UNIT_OBJECT"
                        },
                        {
                            "name": "gousse vanille",
                            "quantity": 1,
                            "unit": "UNIT_POD"
                        }
                    ]
                }
            ]
        },
        {
            "name": "american",
            "recipes": [
                {
                    "id": 300,
                    "title": "wrap",
                    "ingredients": [
                        {
                            "name": "tortilla",
                            "quantity": 4,
                            "unit": "UNIT_OBJECT"
                        },
                        {
                            "name": "salade",
                            "quantity": 1,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "tomate",
                            "quantity": 9,
                            "unit": "UNIT_SLICE"
                        },
                        {
                            "name": "concombre",
                            "quantity": 12,
                            "unit": "UNIT_SLICE"
                        },
                        {
                            "name": "oignon",
                            "quantity": 4,
                            "unit": "UNIT_SLICE"
                        },
                        {
                            "name": "poulet",
                            "quantity": 300,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "fromage",
                            "quantity": 4,
                            "unit": "UNIT_SLICE"
                        },
                        {
                            "name": "sauce au choix",
                            "unit": "UNIT_PM"
                        }
                    ]
                }
            ]
        },
        {
            "name": "japanese",
            "recipes": [
                {
                    "id": 200,
                    "title": "sushi",
                    "ingredients": [
                        {
                            "name": "riz",
                            "quantity": 500,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "vinaigre de riz",
                            "quantity": 60,
                            "unit": "UNIT_MILLILITERS"
                        },
                        {
                            "name": "sucre",
                            "quantity": 30,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "sel",
                            "quantity": 5,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "saumon",
                            "quantity": 200,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "avocat",
                            "quantity": 1,
                            "unit": "UNIT_OBJECT"
                        },
                        {
                            "name": "algue nori",
                            "quantity": 10,
                            "unit": "UNIT_SHEET"
                        }
                    ]
                },
                {
                    "id": 201,
                    "title": "ramen",
                    "ingredients": [
                        {
                            "name": "nouilles ramen",
                            "quantity": 2,
                            "unit": "UNIT_PACK"
                        },
                        {
                            "name": "bouillon de poulet",
                            "quantity": 800,
                            "unit": "UNIT_MILLILITERS"
                        },
                        {
                            "name": "filet de porc",
                            "quantity": 200,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "œuf",
                            "quantity": 2,
                            "unit": "UNIT_OBJECT"
                        },
                        {
                            "name": "oignon vert",
                            "quantity": 2,
                            "unit": "UNIT_OBJECT"
                        },
                        {
                            "name": "pousse de bambou",
                            "quantity": 100,
                            "unit": "UNIT_GRAM"
                        },
                        {
                            "name": "algue nori",
                            "quantity": 2,
                            "unit": "UNIT_SHEET"
                        }
                    ]
                }
            ]
        }
    ]
}





public>js>fetchAllRecipes.js




import { createMarkup } from "../utils/createMarkup.js";
import { handleEditButtonClick, } from "./update.js";
import { fetchDelete } from "../js/fetchDelete.js"


export const units = [
    "UNIT_GRAM": "gramme",// "gram",
    "UNIT_KILOGRAM": "Kg",// "kilogram",
    "UNIT_OBJECT": "piece",// "object",
    "UNIT_PACK": "sachet",// "bag",
    "UNIT_SLICE": "tranche",// "slice",
    "UNIT_MILLILITERS": "millilitre",
    "UNIT_LITER": "litre",
    "UNIT_TABLESPOON": "cuillère à soupe",// "tablespoon",
    "UNIT_TEASPOON": "cuillère à café",// "teaspoon",
    "UNIT_CUBE": "cube",
    "UNIT_POD": "gousse",// "pod",
    "UNIT_PINCH": "pincer",// "pinch",
    "UNIT_SHEET": "feuille",// "sheet",
    "UNIT_PM": "selon son goût" //"to taste"
];

const showElement = document.getElementById('showElement');


fetch('https://localhost:4343/recipes', {
    method: "GET",
    headers:
    {
        "content-type": "application/json",

    },
}
)
    .then(res => res.json())
    .then(allRecipes => {
        // console.log(allRecipes); 
        //console.log(allRecipes.recipes.name);
        allRecipes.forEach(recipe => {
            // console.log(recipe.recipes);
            //recuperation des recettes par Pays
            //console.log(recipe);
            createMarkup('h1', recipe.name, showElement,);

            const country = createMarkup('section', "", showElement, [{ class: "row" }]);

            const recettes = recipe.recipes;
            recettes.forEach(recette => {
                // console.log(recette.ingredients);
                //recuperation de toutes les recettes (uniquement!)
                //console.log(recette);
                const titleIng = createMarkup('article', '', country, [{ class: "card col-4 recipeName" }])

                createMarkup('h2', recette.title, titleIng, [{ class: "card-title" }]);


                const cardBody = createMarkup('div', "", titleIng, [{ class: "card-body" }]);

                const ingredients = recette.ingredients;
                ingredients.forEach(ingredient => {
                    // console.log(ingredient.name);


                    createMarkup('h3', ingredient.name, cardBody);
                    createMarkup('p', ingredient.quantity + " " + units[ingredient.unit], cardBody, [{ class: 'card-text' }]);


                })
                const buttonDiv = createMarkup('div', '', cardBody)

                const btnEdit = createMarkup('button', 'Modifier', buttonDiv, [
                    { class: 'edit-recipe btn btn-warning' },
                    { 'data-id': recette.id },
                    { 'data-ingredients': JSON.stringify(recette.ingredients) }
                ]);


                // Passer l'ID de la recette, l'objet recette et le titre de la recette à la fonction handleEditButtonClick
                btnEdit.addEventListener('click', () => {
                    handleEditButtonClick(recette.id, JSON.stringify(recette.ingredients), recette.title);
                    console.log("Modifier recette :", recette);
                });


                const btnDelete = createMarkup('button', 'Supprimer', buttonDiv, [{ class: "reload btn btn-danger" }]);
                btnDelete.addEventListener('click', () => {
                    console.log(recette.id);
                    if (confirm('Souhaitez-vous confirmer ?')) {

                        fetchDelete(recette.id)
                        location.href = "https://localhost:4343/home"
                    }
                    else {
                        location.href = "https://localhost:4343/home"

                    }



                    location.href = "https://localhost:4343/home"


                    console.log("supprimer recette ", recette);


                });
            })
        })

    });












public>utils>createMarkup.js



export function createMarkup(markupname, text, parent, attributes = []) {
    const markup = document.createElement(markupname);
    markup.textContent = text;
    parent.appendChild(markup);
    for (const attribute of attributes) {
      for (let key in attribute) {
        markup.setAttribute(key, attribute[key]);
      }
    }
    return markup;
  }



  controllers>app.ctrl.js


const { resolve } = require('path');
const { allRecipes } = require('../data/db.json');
const fs = require('fs');
const { updateRecipeCtrl } = require('./recipes.ctrl'); // Assurez-vous que cette ligne est présente pour importer la fonction updateRecipeCtrl

exports.homeCtrl = (req, res) => {
  res.sendFile(resolve('public', 'home.html'));
};

exports.recipesCtrl = (req, res) => {
  res.json(allRecipes);
};

exports.deleteCtrl = (req, res) => {
  const id = req.params.id;
  let isIdExists = false;

  allRecipes.forEach(recipe => {
    const recipes = recipe.recipes;

    const index = recipes.findIndex(r => r.id == id);
    if (index !== -1) {
      isIdExists = true;
      recipes.splice(index, 1);
      if (recipes.length === 0) {
        // Supprimer la gastronomie si elle ne contient plus de recette
        allRecipes.splice(allRecipes.findIndex(r => r === recipe), 1);
      }
      return;
    }
  });

  if (!isIdExists) {
    const error = new Error('ID not found');
    error.name = 'NotFoundError';
    throw error;
  }

  // Réécrire le fichier db.json avec les modifications
  const updatedData = JSON.stringify({ allRecipes });
  fs.writeFile('data/db.json', updatedData, err => {
    if (err) {
      console.error(err);
      return;
    }
    console.log('db.json updated successfully');
  });

  // Le reste du code ici
};






controllers>allRecipes.ctrl.js


const data = require('../data/db.json');

exports.getAllRecipes = (req, res) => {
    try {
        res.status(200).json(data.allRecipes);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
};






controllers>recipes.ctrl.js



const data = require('../data/db.json');
const fs = require('fs');


exports.updateRecipeCtrl = (req, res) => {
    const { recipeId } = req.params;
    const { title, ingredients } = req.body;
  
    // Recherche de la recette correspondante dans la base de données
    const recipe = data.allRecipes.flatMap((country) => country.recipes).find((recipe) => recipe.id === parseInt(recipeId));
  
    if (!recipe) {
      return res.status(404).json({ message: "Recette non trouvée." });
    }
  
    // Mise à jour du titre et des ingrédients de la recette
    recipe.title = title;
    recipe.ingredients = ingredients;
  
    // Réécrire le fichier db.json avec les modifications
    const updatedData = JSON.stringify({ allRecipes: data.allRecipes });
    fs.writeFile('data/db.json', updatedData, (err) => {
      if (err) {
        console.error(err);
        return res.status(500).json({ message: "Erreur lors de la mise à jour de la recette." });
      }
      console.log('db.json updated successfully');
      res.status(200).json({ message: "Recette mise à jour avec succès.", recipe });
    });
  };
  
  exports.updateIngredientsCtrl = (req, res) => {
    const { recipeId } = req.params;
    const { ingredients } = req.body;
  
    // Recherche de la recette correspondante dans la base de données
    const recipe = data.allRecipes.flatMap(country => country.recipes).find(recipe => recipe.id === parseInt(recipeId));
  
    if (!recipe) {
      return res.status(404).json({ message: "Recette non trouvée." });
    }
  
    // Mise à jour des ingrédients de la recette
    recipe.ingredients = ingredients;
  
    res.status(200).json({ message: "Ingrédients de recette mis à jour avec succès.", recipe });
  };
  
  // ...





routing>app.routes.js



// routes/app.routes.js

const router = require('express').Router();
const {
  homeCtrl,
  recipesCtrl,
  deleteCtrl
} = require('../controllers/app.ctrl');
const {
  updateRecipeCtrl,
  updateIngredientsCtrl
} = require('../controllers/recipes.ctrl.js');

router.get('/home', homeCtrl);
router.get('/recipes', recipesCtrl);
router.delete('/recipes/delete/:id', deleteCtrl);
router.post('/recipes/:recipeId', updateRecipeCtrl);
router.post('/ingredients/:recipeId', updateIngredientsCtrl);

module.exports = router;





routing>index.js


//On appelle les routes 

const router = require('express').Router();
const appRoutes = require('./app.routes');


router.use(appRoutes);


router.get('*', (req, res) => res.redirect('/home'));

module.exports = router;



app.js



const { resolve } = require('path');
const express = require('express');
const app = express();

const router = require('./routing');

// CONFIGURATION DE L'APP
app.use(express.static(resolve('public')));
app.use(router);


module.exports = app;



public>js>fetchDelete.js


export function fetchDelete(id){
    console.log("fetchDelete");

    fetch(`https://localhost:4343/recipes/delete/${id}`, {

    method: "DELETE",
    })
   .then(res=>res.json())
   
  


}






public>js>update.js


import { createMarkup } from "../utils/createMarkup.js";
import { units } from './fetchAllRecipes.js';

// Variable pour stocker le formulaire actif
let activeForm = null;

// Variable pour vérifier si le formulaire a déjà été créé
let formCreated = false;

// Fonction pour créer le formulaire de modification
function createEditForm(recipeId, recipeTitle, ingredients) {
    // Vérifier si le formulaire est déjà ouvert
    if (activeForm) {
        return; // Ne rien faire si le formulaire est déjà ouvert
    }

    // Récupérer l'article (titleIng) correspondant à l'ID du bouton "Modifier"
    const titleIng = document.querySelector(`[data-id="${recipeId}"]`);

    // Créer le formulaire de modification et l'insérer dans l'article titleIng
    const form = createMarkup('form', '', titleIng, [{ class: 'edit-form' }]);

    // Champs pour modifier le titre de la recette
    const titleLabel = createMarkup('label', 'Titre de la recette:', form);
    const titleInput = createMarkup('input', '', form, [
        { type: 'text' },
        { value: recipeTitle }, // Afficher le titre actuel de la recette dans le champ de saisie
    ]);

    // Champs pour modifier les ingrédients
    const ingredientsLabel = createMarkup('label', 'Ingrédients:', form);
    const ingredientList = createMarkup('div', '', form, [{ class: 'ingredient-list' }]);

    function createIngredientInput(ingredient) {
        const ingredientGroup = createMarkup('div', '', ingredientList, [{ class: 'ingredient-group' }]);

        const nameInput = createMarkup('input', '', ingredientGroup, [
            { type: 'text' },
            { value: ingredient.name }, // Afficher le nom actuel de l'ingrédient dans le champ de saisie
            { placeholder: "Nom de l'ingrédient" },
        ]);

        const quantityInput = createMarkup('input', '', ingredientGroup, [
            { type: 'number' },
            { value: ingredient.quantity }, // Afficher la quantité actuelle de l'ingrédient dans le champ de saisie
            { placeholder: 'Quantité' },
        ]);

        // Créer l'élément select pour l'unité de l'ingrédient
        const unitSelect = createMarkup('select', '', ingredientGroup);

        // Ajouter les options à l'élément select
        Object.keys(units).forEach((unit) => {
            const option = createMarkup("option", unit, unitSelect, [{ value: unit }]);
            if (unit === ingredient.unit) {
                option.selected = true;
            }
        });

        // Écouteur d'événement pour détecter les changements dans les champs de saisie
        nameInput.addEventListener('input', () => {
            ingredient.name = nameInput.value;
        });

        quantityInput.addEventListener('input', () => {
            ingredient.quantity = quantityInput.value;
        });

        // Écouteur d'événement pour gérer les changements dans l'élément select d'unité
        unitSelect.addEventListener('change', () => {
            ingredient.unit = unitSelect.value;
        });
    }

    // Créer les champs pour les ingrédients existants
    ingredients.forEach((ingredient) => createIngredientInput(ingredient));

    // Bouton "Ajouter un ingrédient"
    const addIngredientButton = createMarkup('button', 'Ajouter un ingrédient', form);
    addIngredientButton.addEventListener('click', () => {
        // Créer un nouvel ingrédient avec des valeurs par défaut
        const newIngredient = {
            name: '',
            quantity: '',
            unit: Object.keys(units)[0], // Sélectionner la première unité par défaut
        };
        createIngredientInput(newIngredient);
    });

    // Bouton "Enregistrer" de type submit
    const submitButton = createMarkup('button', 'Enregistrer', form, [{ type: 'submit' }]);

// Événement de soumission du formulaire
form.addEventListener('submit', (event) => {
    event.preventDefault(); // Empêcher le rechargement de la page par défaut

    // Collecter les données du formulaire
    const updatedTitle = titleInput.value;
    const updatedIngredients = [];
    const ingredientGroups = ingredientList.querySelectorAll('.ingredient-group');

    ingredientGroups.forEach((ingredientGroup) => {
      const nameInput = ingredientGroup.querySelector('input[type="text"]');
      const quantityInput = ingredientGroup.querySelector('input[type="number"]');
      const unitSelect = ingredientGroup.querySelector('select');

      const ingredient = {
        name: nameInput.value,
        quantity: quantityInput.value,
        unit: unitSelect.value,
      };

      updatedIngredients.push(ingredient);
    });

    // Créer un objet représentant la recette mise à jour
    const updatedRecipe = {
      id: recipeId,
      title: updatedTitle,
      ingredients: updatedIngredients,
    };

    // Envoyer les données au serveur en utilisant fetch
    fetch('URL_DU_ENDPOINT_DE_MISE_A_JOUR', {
      method: 'PUT', // Vous pouvez utiliser 'POST' si c'est une création de nouvelle recette
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedRecipe),
    })
      .then((response) => response.json())
      .then((data) => {
        // Gérer la réponse du serveur (data) si nécessaire
        console.log(data);
      })
      .catch((error) => {
        console.error('Erreur lors de la mise à jour de la recette :', error);
      });

    // Réinitialiser le formulaire après l'envoi des données
    form.reset();
  });


    
    // Stocker le formulaire actif
    activeForm = form;

    // Mettre à jour formCreated pour indiquer que le formulaire a été créé
    formCreated = true;
}

// Fonction pour gérer l'événement de clic du bouton "Modifier"
export function handleEditButtonClick(recipeId, ingredientsJSON, recipeTitle) {
    const ingredients = JSON.parse(ingredientsJSON);

    // Créer le formulaire de modification
    createEditForm(recipeId, recipeTitle, ingredients);
}